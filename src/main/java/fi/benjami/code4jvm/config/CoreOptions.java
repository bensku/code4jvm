package fi.benjami.code4jvm.config;

import java.lang.invoke.StringConcatFactory;

import fi.benjami.code4jvm.Condition;
import fi.benjami.code4jvm.statement.StringConcat;

/**
 * Compile options implemented by the code4jvm library.
 *
 */
public class CoreOptions {

	/**
	 * Sets the Java version for generated bytecode. It is highly recommended
	 * that you explicitly set this if you are saving the class files somewhere.
	 * 
	 * <p>By default, code4jvm generates Java 17 bytecode, since the library
	 * itself requires Java 17.
	 */
	public static final CompileOption<JavaVersion> JAVA_VERSION =
			new CompileOption<>("core.java-version", JavaVersion.JAVA_17);
	
	// TODO this was actually in Java 9, but we might add Java 8 support at some point
	/**
	 * Enables {@code invokedynamic} with {@link StringConcat}
	 * (using the standard library {@link StringConcatFactory}). Otherwise,
	 * {@link StringBuilder} is used.
	 */
	public static final CompileOption<Boolean> INDY_STRING_CONCAT =
			new CompileOption<Boolean>("core.indy-string-concat",
					options -> options.get(JAVA_VERSION).isAtLeast(JavaVersion.JAVA_17),
					new Requirement<>(true, JAVA_VERSION, Condition.Type.GREATER_OR_EQUAL, JavaVersion.JAVA_17));
}
