package fi.benjami.code4jvm.test;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.function.IntSupplier;

import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;

import fi.benjami.code4jvm.Condition;
import fi.benjami.code4jvm.Constant;
import fi.benjami.code4jvm.Type;
import fi.benjami.code4jvm.Variable;
import fi.benjami.code4jvm.block.Block;
import fi.benjami.code4jvm.config.CompileOptions;
import fi.benjami.code4jvm.flag.Access;
import fi.benjami.code4jvm.statement.Arithmetic;
import fi.benjami.code4jvm.statement.Return;
import fi.benjami.code4jvm.structure.LoopBlock;
import fi.benjami.code4jvm.typedef.ClassDef;

@ExtendWith({EnableDebugExtension.class})
public class LoopBlockTest {

	@ParameterizedTest
	@OptionsSource
	public void emptyLoop(CompileOptions opts) throws Throwable {
		var def = ClassDef.create("fi.benjami.code4jvm.test.EmptyLoop", Access.PUBLIC);
		def.interfaces(Type.of(IntSupplier.class));
		def.addEmptyConstructor(Access.PUBLIC);
		
		var method = def.addMethod(Type.INT, "getAsInt", Access.PUBLIC);
		method.add(LoopBlock.of(Block.create(), Condition.always(false), true));
		method.add(Return.value(Constant.of(0)));
		
		var instance = (IntSupplier) TestUtils.newInstance(def, opts);
		assertEquals(0, instance.getAsInt());
	}
	
	@ParameterizedTest
	@OptionsSource
	public void skippedLoop(CompileOptions opts) throws Throwable {
		var def = ClassDef.create("fi.benjami.code4jvm.test.SkippedLoop", Access.PUBLIC);
		def.interfaces(Type.of(IntSupplier.class));
		def.addEmptyConstructor(Access.PUBLIC);
		
		var method = def.addMethod(Type.INT, "getAsInt", Access.PUBLIC);
		var body = Block.create();
		body.add(Return.value(Constant.of(-1)));
		method.add(LoopBlock.whileLoop(Block.create(), Condition.always(false)));
		method.add(Return.value(Constant.of(0)));
		
		var instance = (IntSupplier) TestUtils.newInstance(def, opts);
		assertEquals(0, instance.getAsInt());
	}
	
	@ParameterizedTest
	@OptionsSource
	public void returnFromLoop(CompileOptions opts) throws Throwable {
		var def = ClassDef.create("fi.benjami.code4jvm.test.ReturnFromLoop", Access.PUBLIC);
		def.interfaces(Type.of(IntSupplier.class));
		def.addEmptyConstructor(Access.PUBLIC);
		
		var method = def.addMethod(Type.INT, "getAsInt", Access.PUBLIC);
		var body = Block.create();
		body.add(Return.value(Constant.of(0)));
		method.add(LoopBlock.of(body, Condition.always(true), true));
		method.add(Return.value(Constant.of(1)));
		
		var instance = (IntSupplier) TestUtils.newInstance(def, opts);
		assertEquals(0, instance.getAsInt());
	}
	
	@ParameterizedTest
	@OptionsSource
	public void infiniteLoop(CompileOptions opts) throws Throwable {
		var def = ClassDef.create("fi.benjami.code4jvm.test.InfiniteLoop", Access.PUBLIC);
		def.interfaces(Type.of(IntSupplier.class));
		def.addEmptyConstructor(Access.PUBLIC);
		
		var method = def.addMethod(Type.INT, "getAsInt", Access.PUBLIC);
		method.add(LoopBlock.of(Block.create(), Condition.always(true), true));
		method.add(Return.value(Constant.of(0)));
		
		TestUtils.newInstance(def, opts);
		// Don't actually execute this!
		// For now, just check that the generated bytecode is valid
	}
	
	@ParameterizedTest
	@OptionsSource
	public void doWhileOnce(CompileOptions opts) throws Throwable {
		var def = ClassDef.create("fi.benjami.code4jvm.test.DoWhileOnce", Access.PUBLIC);
		def.interfaces(Type.of(IntSupplier.class));
		def.addEmptyConstructor(Access.PUBLIC);
		
		var method = def.addMethod(Type.INT, "getAsInt", Access.PUBLIC);
		var body = Block.create();
		body.add(Return.value(Constant.of(0)));
		method.add(LoopBlock.doWhileLoop(body, Condition.always(false)));
		method.add(Return.value(Constant.of(1)));
		
		var instance = (IntSupplier) TestUtils.newInstance(def, opts);
		assertEquals(0, instance.getAsInt());
	}
	
	@ParameterizedTest
	@OptionsSource
	public void whileOnce(CompileOptions opts) throws Throwable {
		var def = ClassDef.create("fi.benjami.code4jvm.test.WhileOnce", Access.PUBLIC);
		def.interfaces(Type.of(IntSupplier.class));
		def.addEmptyConstructor(Access.PUBLIC);
		
		var method = def.addMethod(Type.INT, "getAsInt", Access.PUBLIC);
		var visited = Variable.create(Type.BOOLEAN);
		method.add(visited.set(Constant.of(false)));
		var returnVal = Variable.create(Type.INT);
		method.add(returnVal.set(Constant.of(1)));
		
		var body = Block.create();
		body.add(visited.set(Constant.of(true)));
		body.add(returnVal.set(Constant.of(0)));
		method.add(LoopBlock.whileLoop(body, Condition.isFalse(visited)));
		method.add(Return.value(returnVal));
		
		var instance = (IntSupplier) TestUtils.newInstance(def, opts);
		assertEquals(0, instance.getAsInt());
	}
	
	@ParameterizedTest
	@OptionsSource
	public void forLoop(CompileOptions opts) throws Throwable {
		var def = ClassDef.create("fi.benjami.code4jvm.test.ForLoop", Access.PUBLIC);
		def.interfaces(Type.of(IntSupplier.class));
		def.addEmptyConstructor(Access.PUBLIC);
		
		var method = def.addMethod(Type.INT, "getAsInt", Access.PUBLIC);
		var counter = Variable.create(Type.INT);
		method.add(counter.set(Constant.of(0)));
		
		var body = Block.create();
		var next = body.add(Arithmetic.add(counter, Constant.of(1)));
		body.add(counter.set(next));
		method.add(LoopBlock.whileLoop(body, Condition.lessThan(counter, Constant.of(10))));
		method.add(Return.value(counter));
		
		var instance = (IntSupplier) TestUtils.newInstance(def, opts);
		assertEquals(10, instance.getAsInt());
	}
	
	@ParameterizedTest
	@OptionsSource
	public void loopWithBreak(CompileOptions opts) throws Throwable {
		var def = ClassDef.create("fi.benjami.code4jvm.test.LoopWithBreak", Access.PUBLIC);
		def.interfaces(Type.of(IntSupplier.class));
		def.addEmptyConstructor(Access.PUBLIC);
		
		var method = def.addMethod(Type.INT, "getAsInt", Access.PUBLIC);
		var body = Block.create();
		var loop = LoopBlock.whileLoop(body, Condition.always(true));
		body.add(loop.breakStmt());
		body.add(Return.value(Constant.of(1)));
		method.add(loop);
		method.add(Return.value(Constant.of(0)));
		
		var instance = (IntSupplier) TestUtils.newInstance(def, opts);
		assertEquals(0, instance.getAsInt());
	}
	
	@ParameterizedTest
	@OptionsSource
	public void loopWithContinue(CompileOptions opts) throws Throwable {
		var def = ClassDef.create("fi.benjami.code4jvm.test.LoopWithContinue", Access.PUBLIC);
		def.interfaces(Type.of(IntSupplier.class));
		def.addEmptyConstructor(Access.PUBLIC);
		
		var method = def.addMethod(Type.INT, "getAsInt", Access.PUBLIC);
		var counter = Variable.create(Type.INT);
		method.add(counter.set(Constant.of(0)));
		
		var body = Block.create();
		var loop = LoopBlock.whileLoop(body, Condition.lessThan(counter, Constant.of(10)));
		var next = body.add(Arithmetic.add(counter, Constant.of(1)));
		body.add(counter.set(next));
		body.add(loop.continueStmt());
		body.add(Return.value(Constant.of(1)));
		method.add(loop);
		method.add(Return.value(counter));
		
		var instance = (IntSupplier) TestUtils.newInstance(def, opts);
		assertEquals(10, instance.getAsInt());
	}
	
	@ParameterizedTest
	@OptionsSource
	public void nestedLoops(CompileOptions opts) throws Throwable {
		var def = ClassDef.create("fi.benjami.code4jvm.test.NestedLoops", Access.PUBLIC);
		def.interfaces(Type.of(IntSupplier.class));
		def.addEmptyConstructor(Access.PUBLIC);
		
		var method = def.addMethod(Type.INT, "getAsInt", Access.PUBLIC);
		var counter = Variable.create(Type.INT);
		method.add(counter.set(Constant.of(0)));
		
		var i = Variable.create(Type.INT);
		method.add(i.set(Constant.of(0)));
		var outer = Block.create();
		var newI = outer.add(Arithmetic.add(i, Constant.of(1)));
		outer.add(i.set(newI));
		
		var j = Variable.create(Type.INT);
		outer.add(j.set(Constant.of(0)));
		
		var inner = Block.create();
		var newJ = inner.add(Arithmetic.add(j, Constant.of(1)));
		inner.add(j.set(newJ));
		var newCount = inner.add(Arithmetic.add(counter, Constant.of(1)));
		inner.add(counter.set(newCount));
		
		outer.add(LoopBlock.whileLoop(inner, Condition.lessThan(j, Constant.of(12))));
		method.add(LoopBlock.whileLoop(outer, Condition.lessThan(i, Constant.of(12))));
		method.add(Return.value(counter));
		
		var instance = (IntSupplier) TestUtils.newInstance(def, opts);
		assertEquals(12 * 12, instance.getAsInt());
	}

}
